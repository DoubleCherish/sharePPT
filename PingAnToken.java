package com.pinganfu.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class PingAnToken extends Contract {
    private static final String BINARY = "608060405260038054600160a01b60ff021990811690915560068054909116905561003033610035602090811b901c565b610057565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b612f25806100666000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80635c975abb1161011a5780639fd0506d116100ad578063c4d66de81161007c578063c4d66de8146106b0578063d73dd623146106d6578063dd62ed3e14610702578063e30c397814610730578063f2fde38b1461073857610206565b80639fd0506d1461064e578063a9059cbb14610656578063ad38bf2214610682578063bd102430146106a857610206565b80637b40283b116100e95780637b40283b1461062e5780638456cb59146106365780638da5cb5b1461063e57806395d89b411461064657610206565b80635c975abb146105cc57806361930630146105d457806366188463146105dc57806370a082311461060857610206565b8063313ce5671161019d57806342966c681161016c57806342966c681461042e578063453920cb1461044b5780634e71e0c8146105785780634eb03f6e14610580578063554bab3c146105a657610206565b8063313ce567146103b657806336ef4ab6146103d45780633f4ba83a146103fa57806340c10f191461040257610206565b806318160ddd116101d957806318160ddd1461031a57806319d0cd671461033457806323b872dd1461035a5780632b6e293f1461039057610206565b80630116bac31461020b57806306fdde031461023957806307546172146102b6578063095ea7b3146102da575b600080fd5b6102376004803603604081101561022157600080fd5b506001600160a01b03813516906020013561075e565b005b610241610875565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027b578181015183820152602001610263565b50505050905090810190601f1680156102a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102be61094a565b604080516001600160a01b039092168252519081900360200190f35b610306600480360360408110156102f057600080fd5b506001600160a01b038135169060200135610959565b604080519115158252519081900360200190f35b610322610af0565b60408051918252519081900360200190f35b6103066004803603602081101561034a57600080fd5b50356001600160a01b0316610b69565b6103066004803603606081101561037057600080fd5b506001600160a01b03813581169160208101359091169060400135610c09565b610306600480360360208110156103a657600080fd5b50356001600160a01b0316610e66565b6103be610f06565b6040805160ff9092168252519081900360200190f35b610322600480360360208110156103ea57600080fd5b50356001600160a01b0316610f4e565b610237610fd6565b6103066004803603604081101561041857600080fd5b506001600160a01b038135169060200135611073565b6103066004803603602081101561044457600080fd5b503561145b565b6102376004803603604081101561046157600080fd5b81019060208101813564010000000081111561047c57600080fd5b82018360208201111561048e57600080fd5b803590602001918460018302840111640100000000831117156104b057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561050357600080fd5b82018360208201111561051557600080fd5b8035906020019184600183028401116401000000008311171561053757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116a8945050505050565b61023761192c565b6102376004803603602081101561059657600080fd5b50356001600160a01b03166119dc565b610237600480360360208110156105bc57600080fd5b50356001600160a01b0316611ac4565b610306611bac565b6102be611bbc565b610306600480360360408110156105f257600080fd5b506001600160a01b038135169060200135611bcb565b6103226004803603602081101561061e57600080fd5b50356001600160a01b0316611d59565b6102be611dad565b610237611dbc565b6102be611e5f565b610241611e6e565b6102be611eb6565b6103066004803603604081101561066c57600080fd5b506001600160a01b038135169060200135611ec5565b6102376004803603602081101561069857600080fd5b50356001600160a01b0316612053565b6102be61213b565b610237600480360360208110156106c657600080fd5b50356001600160a01b031661214a565b610306600480360360408110156106ec57600080fd5b506001600160a01b038135169060200135612216565b6103226004803603604081101561071857600080fd5b506001600160a01b03813581169160200135166123a4565b6102be612433565b6102376004803603602081101561074e57600080fd5b50356001600160a01b0316612442565b6005546001600160a01b031633146107c05760408051600160e51b62461bcd02815260206004820152601f60248201527f6d73672e73656e65722073686f756c6420626520626c61636b6c697374657200604482015290519081900360640190fd5b6004805460408051600160e01b62dc4cf70281526001600160a01b0386811694820194909452602481018590529051929091169162dc4cf79160448082019260009290919082900301818387803b15801561081a57600080fd5b505af115801561082e573d6000803e3d6000fd5b50506040805184815290516001600160a01b03861693507f84f56c200b35bdf7e513b86f67ad4124f046b9266a05115cc152fabb45f30dda92509081900360200190a25050565b60025460408051600160e01b6306fdde0302815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b1580156108bd57600080fd5b505afa1580156108d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108fa57600080fd5b81019080805164010000000081111561091257600080fd5b8201602081018481111561092557600080fd5b815164010000000081118282018710171561093f57600080fd5b509094505050505090565b6006546001600160a01b031690565b6004805460408051600160e01b63dbac26e9028152339381018490529051600093926001600160a01b03169163dbac26e9916024808301926020929190829003018186803b1580156109aa57600080fd5b505afa1580156109be573d6000803e3d6000fd5b505050506040513d60208110156109d457600080fd5b505115610a195760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d6020811015610a9857600080fd5b505115610add5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b610ae785856124b4565b95945050505050565b60025460408051600160e01b6318160ddd02815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610b3857600080fd5b505afa158015610b4c573d6000803e3d6000fd5b505050506040513d6020811015610b6257600080fd5b5051905090565b600080546001600160a01b03163314610bba5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0384169081179091556040517fdbfa6af2c90a44daad8b3235d93da5eb94b7edf43e95b9fa960643682999860190600090a2506001919050565b6004805460408051600160e01b63dbac26e90281526001600160a01b038088169482019490945290516000938793169163dbac26e9916024808301926020929190829003018186803b158015610c5e57600080fd5b505afa158015610c72573d6000803e3d6000fd5b505050506040513d6020811015610c8857600080fd5b505115610ccd5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b158015610d2257600080fd5b505afa158015610d36573d6000803e3d6000fd5b505050506040513d6020811015610d4c57600080fd5b505115610d915760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281523393810184905290516001600160a01b039092169163dbac26e991602480820192602092909190829003018186803b158015610de157600080fd5b505afa158015610df5573d6000803e3d6000fd5b505050506040513d6020811015610e0b57600080fd5b505115610e505760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b610e5b878787612518565b979650505050505050565b600080546001600160a01b03163314610eb75760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040517fd10684b086cb614cd1d7505dd775042833e364513413ba7717412dcce96c688f90600090a2506001919050565b60025460408051600160e01b63313ce56702815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015610b3857600080fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b038581169482019490945290516000939092169163dbac26e991602480820192602092909190829003018186803b158015610fa457600080fd5b505afa158015610fb8573d6000803e3d6000fd5b505050506040513d6020811015610fce57600080fd5b505192915050565b6003546001600160a01b031633146110385760408051600160e51b62461bcd02815260206004820152601b60248201527f6d73672e73656e6465722073686f756c64206265207061757365720000000000604482015290519081900360640190fd5b60038054600160a01b60ff02191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6006546000906001600160a01b031633146110d85760408051600160e51b62461bcd02815260206004820152601b60248201527f6d73672e73656e6465722073686f756c64206265206d696e7465720000000000604482015290519081900360640190fd5b600354600160a01b900460ff16156111285760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281523393810184905290516001600160a01b039092169163dbac26e991602480820192602092909190829003018186803b15801561117857600080fd5b505afa15801561118c573d6000803e3d6000fd5b505050506040513d60208110156111a257600080fd5b5051156111e75760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b15801561123c57600080fd5b505afa158015611250573d6000803e3d6000fd5b505050506040513d602081101561126657600080fd5b5051156112ab5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6001600160a01b0385166113095760408051600160e51b62461bcd02815260206004820152601b60248201527f43616e6e6f74206d696e7420746f207a65726f20616464726573730000000000604482015290519081900360640190fd5b60025460408051600160e11b63723434470281526004810187905290516001600160a01b039092169163e468688e9160248082019260009290919082900301818387803b15801561135957600080fd5b505af115801561136d573d6000803e3d6000fd5b505060025460408051600160e11b6310f29c1d0281526001600160a01b038a81166004830152602482018a905291519190921693506321e5383a9250604480830192600092919082900301818387803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b50506040805187815290516001600160a01b03891693503392507fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89181900360200190a36040805185815290516001600160a01b03871691600091600080516020612e3e8339815191529181900360200190a3506001949350505050565b600354600090600160a01b900460ff16156114ae5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281523393810184905290516001600160a01b039092169163dbac26e991602480820192602092909190829003018186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d602081101561152857600080fd5b50511561156d5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b60025460408051600160e11b6367c775bf0281523360048201526024810186905290516001600160a01b039092169163cf8eeb7e9160448082019260009290919082900301818387803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b505060025460408051600160e11b634141c63b0281526004810188905290516001600160a01b0390921693506382838c76925060248082019260009290919082900301818387803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b50506040805186815290513393507fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592509081900360200190a26040805184815290516000913391600080516020612e3e8339815191529181900360200190a350600192915050565b6000546001600160a01b031633146116f85760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b60025460408051600160e01b63453920cb028152600481019182528451604482015284516001600160a01b039093169263453920cb928692869282916024810191606490910190602087019080838360005b8381101561176257818101518382015260200161174a565b50505050905090810190601f16801561178f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156117c25781810151838201526020016117aa565b50505050905090810190601f1680156117ef5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561181057600080fd5b505af1158015611824573d6000803e3d6000fd5b505050507f2c586a8161695058b918f15f079ee9cf05427ae067f6ede6ddda358cd6c8c3d28282604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561188c578181015183820152602001611874565b50505050905090810190601f1680156118b95780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156118ec5781810151838201526020016118d4565b50505050905090810190601f1680156119195780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b6001546001600160a01b0316331461197857604051600160e51b62461bcd028152600401808060200182810382526025815260200180612dee6025913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b03163314611a2c5760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b6001600160a01b038116611a7457604051600160e51b62461bcd02815260040180806020018281038252602f815260200180612d74602f913960400191505060405180910390fd5b600680546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fb6b8f1859c5c352e5ffad07d0f77e384ac725512c015bd3a3ffc885831c8a42590600090a250565b6000546001600160a01b03163314611b145760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b6001600160a01b038116611b5c57604051600160e51b62461bcd02815260040180806020018281038252602f815260200180612d74602f913960400191505060405180910390fd5b600380546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a250565b600354600160a01b900460ff1681565b6002546001600160a01b031681565b6004805460408051600160e01b63dbac26e9028152339381018490529051600093926001600160a01b03169163dbac26e9916024808301926020929190829003018186803b158015611c1c57600080fd5b505afa158015611c30573d6000803e3d6000fd5b505050506040513d6020811015611c4657600080fd5b505115611c8b5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b158015611ce057600080fd5b505afa158015611cf4573d6000803e3d6000fd5b505050506040513d6020811015611d0a57600080fd5b505115611d4f5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b610ae7858561257e565b60025460408051600160e01b6327e235e30281526001600160a01b038481166004830152915160009392909216916327e235e391602480820192602092909190829003018186803b158015610fa457600080fd5b6004546001600160a01b031681565b6003546001600160a01b03163314611e1e5760408051600160e51b62461bcd02815260206004820152601b60248201527f6d73672e73656e6465722073686f756c64206265207061757365720000000000604482015290519081900360640190fd5b60038054600160a01b60ff021916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6000546001600160a01b031690565b60025460408051600160e01b6395d89b4102815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b1580156108bd57600080fd5b6003546001600160a01b031690565b6004805460408051600160e01b63dbac26e9028152339381018490529051600093926001600160a01b03169163dbac26e9916024808301926020929190829003018186803b158015611f1657600080fd5b505afa158015611f2a573d6000803e3d6000fd5b505050506040513d6020811015611f4057600080fd5b505115611f855760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d602081101561200457600080fd5b5051156120495760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b610ae785856125db565b6000546001600160a01b031633146120a35760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b6001600160a01b0381166120eb57604051600160e51b62461bcd028152600401808060200182810382526031815260200180612e5e6031913960400191505060405180910390fd5b600580546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e90600090a250565b6005546001600160a01b031690565b600654600160a01b900460ff16156121ac5760408051600160e51b62461bcd02815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166121f457604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612eaf602b913960400191505060405180910390fd5b6121fd81612638565b5060068054600160a01b60ff021916600160a01b179055565b6004805460408051600160e01b63dbac26e9028152339381018490529051600093926001600160a01b03169163dbac26e9916024808301926020929190829003018186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d602081101561229157600080fd5b5051156122d65760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b6004805460408051600160e01b63dbac26e90281526001600160a01b0380891694820194909452905187939092169163dbac26e991602480820192602092909190829003018186803b15801561232b57600080fd5b505afa15801561233f573d6000803e3d6000fd5b505050506040513d602081101561235557600080fd5b50511561239a5760408051600160e51b62461bcd02815260206004820152601c6024820152600080516020612e8f833981519152604482015290519081900360640190fd5b610ae7858561265a565b60025460408051600160e01b635c6581650281526001600160a01b038581166004830152848116602483015291516000939290921691635c65816591604480820192602092909190829003018186803b15801561240057600080fd5b505afa158015612414573d6000803e3d6000fd5b505050506040513d602081101561242a57600080fd5b50519392505050565b6001546001600160a01b031690565b6000546001600160a01b031633146124925760408051600160e51b62461bcd02815260206004820152601a6024820152600080516020612eda833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600354600090600160a01b900460ff16156125075760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b61251183836126b7565b9392505050565b600354600090600160a01b900460ff161561256b5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b6125768484846127c0565b949350505050565b600354600090600160a01b900460ff16156125d15760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b61251183836129b0565b600354600090600160a01b900460ff161561262e5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b6125118383612b34565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600354600090600160a01b900460ff16156126ad5760408051600160e51b62461bcd0281526020600482015260196024820152600080516020612dce833981519152604482015290519081900360640190fd5b6125118383612ca9565b60006001600160a01b03831661270157604051600160e51b62461bcd028152600401808060200182810382526022815260200180612d526022913960400191505060405180910390fd5b60025460408051600160e21b63369182630281523360048201526001600160a01b038681166024830152604482018690529151919092169163da46098c91606480830192600092919082900301818387803b15801561275f57600080fd5b505af1158015612773573d6000803e3d6000fd5b50506040805185815290516001600160a01b03871693503392507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360200190a350600192915050565b60006001600160a01b0383166128205760408051600160e51b62461bcd02815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f206164647265737300604482015290519081900360640190fd5b60025460408051600160e11b634bec46690281526001600160a01b03878116600483015233602483015260448201869052915191909216916397d88cd291606480830192600092919082900301818387803b15801561287e57600080fd5b505af1158015612892573d6000803e3d6000fd5b505060025460408051600160e11b6367c775bf0281526001600160a01b03898116600483015260248201889052915191909216935063cf8eeb7e9250604480830192600092919082900301818387803b1580156128ee57600080fd5b505af1158015612902573d6000803e3d6000fd5b505060025460408051600160e11b6310f29c1d0281526001600160a01b0388811660048301526024820188905291519190921693506321e5383a9250604480830192600092919082900301818387803b15801561295e57600080fd5b505af1158015612972573d6000803e3d6000fd5b50506040805185815290516001600160a01b03808816945088169250600080516020612e3e8339815191529181900360200190a35060019392505050565b60006001600160a01b0383166129fa57604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612da3602b913960400191505060405180910390fd5b60025460408051600160e11b634bec46690281523360048201526001600160a01b03868116602483015260448201869052915191909216916397d88cd291606480830192600092919082900301818387803b158015612a5857600080fd5b505af1158015612a6c573d6000803e3d6000fd5b505060025460408051600160e01b635c65816502815233600482018190526001600160a01b03808a166024840181905293519396509094507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925931691635c65816591604480820192602092909190829003018186803b158015612aee57600080fd5b505afa158015612b02573d6000803e3d6000fd5b505050506040513d6020811015612b1857600080fd5b505160408051918252519081900360200190a350600192915050565b60006001600160a01b038316612b945760408051600160e51b62461bcd02815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f206164647265737300604482015290519081900360640190fd5b60025460408051600160e11b6367c775bf0281523360048201526024810185905290516001600160a01b039092169163cf8eeb7e9160448082019260009290919082900301818387803b158015612bea57600080fd5b505af1158015612bfe573d6000803e3d6000fd5b505060025460408051600160e11b6310f29c1d0281526001600160a01b0388811660048301526024820188905291519190921693506321e5383a9250604480830192600092919082900301818387803b158015612c5a57600080fd5b505af1158015612c6e573d6000803e3d6000fd5b50506040805185815290516001600160a01b0387169350339250600080516020612e3e8339815191529181900360200190a350600192915050565b60006001600160a01b038316612cf357604051600160e51b62461bcd02815260040180806020018281038252602b815260200180612e13602b913960400191505060405180910390fd5b60025460408051600160e11b632feb968b0281523360048201526001600160a01b0386811660248301526044820186905291519190921691635fd72d1691606480830192600092919082900301818387803b158015612a5857600080fdfe43616e6e6f7420617070726f766520746f20746865207a65726f206164647265737343616e6e6f742075706461746520746865206e657750617573657220746f20746865207a65726f206164647265737343616e6e6f74206465637265617365417070726f76616c20746f20746865207a65726f206164647265737373746174652073686f756c646e277420626520706175736564000000000000006d73672e73656e6465722073686f756c64206265206f6e6c7950656e64696e674f776e657243616e6e6f7420696e637265617365417070726f76616c20746f20746865207a65726f2061646472657373ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef43616e6e6f74207570646174652074686520626c61636b6c697374657220746f20746865207a65726f20616464726573734163636f756e74206e6f7420696e2074686520626c61636b6c6973740000000043616e6e6f7420696e697469616c697a6520746865206f776e657220746f207a65726f20616464726573736d73672e73656e6465722073686f756c64206265206f776e6572000000000000a165627a7a723058208b8172ac40dd372d7e55080fd765f80104e7bf0f46f1f84b147efe524ea5a09d0029";

    public static final String FUNC_CHANGEBLACKLIST = "changeBlacklist";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_MINTER = "minter";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_SETBLACKLISTSTORE = "setBlacklistStore";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_SETTOKENSTORE = "setTokenStore";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_QUERYBLACKLIST = "queryBlacklist";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CHANGETOKENNAME = "changeTokenName";

    public static final String FUNC_CLAIMOWNERSHIP = "claimOwnership";

    public static final String FUNC_UPDATEMINTER = "updateMinter";

    public static final String FUNC_UPDATEPAUSER = "updatePauser";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_TOKENSTORE = "tokenStore";

    public static final String FUNC_DECREASEAPPROVAL = "decreaseApproval";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BLACKLISTSTORE = "blacklistStore";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_PAUSER = "pauser";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_UPDATEBLACKLISTER = "updateBlacklister";

    public static final String FUNC_BLACKLISTER = "blacklister";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_INCREASEAPPROVAL = "increaseApproval";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_PENDINGOWNER = "pendingOwner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event MINTERCHANGED_EVENT = new Event("MinterChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BURN_EVENT = new Event("Burn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BLACKLISTERCHANGED_EVENT = new Event("BlacklisterChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event BLACKLISTSTORESET_EVENT = new Event("BlacklistStoreSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event BLACKLIST_EVENT = new Event("Blacklist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event PAUSERCHANGED_EVENT = new Event("PauserChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENSTORESET_EVENT = new Event("TokenStoreSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CHANGETOKENNAME_EVENT = new Event("ChangeTokenName", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PingAnToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PingAnToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PingAnToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PingAnToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> changeBlacklist(String _account, BigInteger _status) {
        final Function function = new Function(
                FUNC_CHANGEBLACKLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_account), 
                new org.web3j.abi.datatypes.generated.Uint256(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> minter() {
        final Function function = new Function(FUNC_MINTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setBlacklistStore(String _blacklistStore) {
        final Function function = new Function(
                FUNC_SETBLACKLISTSTORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_blacklistStore)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTokenStore(String _tokenStore) {
        final Function function = new Function(
                FUNC_SETTOKENSTORE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenStore)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> queryBlacklist(String _account) {
        final Function function = new Function(FUNC_QUERYBLACKLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(BigInteger _value) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeTokenName(String _name, String _symbol) {
        final Function function = new Function(
                FUNC_CHANGETOKENNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> claimOwnership() {
        final Function function = new Function(
                FUNC_CLAIMOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateMinter(String _newMinter) {
        final Function function = new Function(
                FUNC_UPDATEMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newMinter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updatePauser(String _newPauser) {
        final Function function = new Function(
                FUNC_UPDATEPAUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newPauser)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> tokenStore() {
        final Function function = new Function(FUNC_TOKENSTORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> decreaseApproval(String _spender, BigInteger _subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEAPPROVAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_subtractedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _holder) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_holder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> blacklistStore() {
        final Function function = new Function(FUNC_BLACKLISTSTORE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> pauser() {
        final Function function = new Function(FUNC_PAUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateBlacklister(String _newBlacklister) {
        final Function function = new Function(
                FUNC_UPDATEBLACKLISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newBlacklister)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> blacklister() {
        final Function function = new Function(FUNC_BLACKLISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initialize(String _owner) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> increaseApproval(String _spender, BigInteger _addedValue) {
        final Function function = new Function(
                FUNC_INCREASEAPPROVAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_addedValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _holder, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_holder), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> pendingOwner() {
        final Function function = new Function(FUNC_PENDINGOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<MinterChangedEventResponse> getMinterChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINTERCHANGED_EVENT, transactionReceipt);
        ArrayList<MinterChangedEventResponse> responses = new ArrayList<MinterChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MinterChangedEventResponse typedResponse = new MinterChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinterChangedEventResponse> minterChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MinterChangedEventResponse>() {
            @Override
            public MinterChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINTERCHANGED_EVENT, log);
                MinterChangedEventResponse typedResponse = new MinterChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinterChangedEventResponse> minterChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTERCHANGED_EVENT));
        return minterChangedEventFlowable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.minter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BurnEventResponse> burnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BurnEventResponse>() {
            @Override
            public BurnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BURN_EVENT, log);
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.log = log;
                typedResponse.burner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BurnEventResponse> burnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventFlowable(filter);
    }

    public List<BlacklisterChangedEventResponse> getBlacklisterChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLACKLISTERCHANGED_EVENT, transactionReceipt);
        ArrayList<BlacklisterChangedEventResponse> responses = new ArrayList<BlacklisterChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlacklisterChangedEventResponse typedResponse = new BlacklisterChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newBlacklister = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlacklisterChangedEventResponse> blacklisterChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BlacklisterChangedEventResponse>() {
            @Override
            public BlacklisterChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLACKLISTERCHANGED_EVENT, log);
                BlacklisterChangedEventResponse typedResponse = new BlacklisterChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newBlacklister = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlacklisterChangedEventResponse> blacklisterChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLISTERCHANGED_EVENT));
        return blacklisterChangedEventFlowable(filter);
    }

    public List<BlacklistStoreSetEventResponse> getBlacklistStoreSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLACKLISTSTORESET_EVENT, transactionReceipt);
        ArrayList<BlacklistStoreSetEventResponse> responses = new ArrayList<BlacklistStoreSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlacklistStoreSetEventResponse typedResponse = new BlacklistStoreSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.blacklistStore = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlacklistStoreSetEventResponse> blacklistStoreSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BlacklistStoreSetEventResponse>() {
            @Override
            public BlacklistStoreSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLACKLISTSTORESET_EVENT, log);
                BlacklistStoreSetEventResponse typedResponse = new BlacklistStoreSetEventResponse();
                typedResponse.log = log;
                typedResponse.blacklistStore = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlacklistStoreSetEventResponse> blacklistStoreSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLISTSTORESET_EVENT));
        return blacklistStoreSetEventFlowable(filter);
    }

    public List<BlacklistEventResponse> getBlacklistEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BLACKLIST_EVENT, transactionReceipt);
        ArrayList<BlacklistEventResponse> responses = new ArrayList<BlacklistEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BlacklistEventResponse typedResponse = new BlacklistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BlacklistEventResponse> blacklistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, BlacklistEventResponse>() {
            @Override
            public BlacklistEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BLACKLIST_EVENT, log);
                BlacklistEventResponse typedResponse = new BlacklistEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BlacklistEventResponse> blacklistEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BLACKLIST_EVENT));
        return blacklistEventFlowable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventFlowable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventFlowable(filter);
    }

    public List<PauserChangedEventResponse> getPauserChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSERCHANGED_EVENT, transactionReceipt);
        ArrayList<PauserChangedEventResponse> responses = new ArrayList<PauserChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauserChangedEventResponse typedResponse = new PauserChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PauserChangedEventResponse> pauserChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, PauserChangedEventResponse>() {
            @Override
            public PauserChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSERCHANGED_EVENT, log);
                PauserChangedEventResponse typedResponse = new PauserChangedEventResponse();
                typedResponse.log = log;
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PauserChangedEventResponse> pauserChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSERCHANGED_EVENT));
        return pauserChangedEventFlowable(filter);
    }

    public List<TokenStoreSetEventResponse> getTokenStoreSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENSTORESET_EVENT, transactionReceipt);
        ArrayList<TokenStoreSetEventResponse> responses = new ArrayList<TokenStoreSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenStoreSetEventResponse typedResponse = new TokenStoreSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenStore = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenStoreSetEventResponse> tokenStoreSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TokenStoreSetEventResponse>() {
            @Override
            public TokenStoreSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENSTORESET_EVENT, log);
                TokenStoreSetEventResponse typedResponse = new TokenStoreSetEventResponse();
                typedResponse.log = log;
                typedResponse.tokenStore = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenStoreSetEventResponse> tokenStoreSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSTORESET_EVENT));
        return tokenStoreSetEventFlowable(filter);
    }

    public List<ChangeTokenNameEventResponse> getChangeTokenNameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGETOKENNAME_EVENT, transactionReceipt);
        ArrayList<ChangeTokenNameEventResponse> responses = new ArrayList<ChangeTokenNameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeTokenNameEventResponse typedResponse = new ChangeTokenNameEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newSymbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangeTokenNameEventResponse> changeTokenNameEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChangeTokenNameEventResponse>() {
            @Override
            public ChangeTokenNameEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGETOKENNAME_EVENT, log);
                ChangeTokenNameEventResponse typedResponse = new ChangeTokenNameEventResponse();
                typedResponse.log = log;
                typedResponse.newName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newSymbol = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangeTokenNameEventResponse> changeTokenNameEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGETOKENNAME_EVENT));
        return changeTokenNameEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    @Deprecated
    public static PingAnToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PingAnToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PingAnToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PingAnToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PingAnToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PingAnToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PingAnToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PingAnToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PingAnToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PingAnToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PingAnToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PingAnToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PingAnToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PingAnToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PingAnToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PingAnToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class MinterChangedEventResponse {
        public Log log;

        public String newAddress;
    }

    public static class MintEventResponse {
        public Log log;

        public String minter;

        public String to;

        public BigInteger value;
    }

    public static class BurnEventResponse {
        public Log log;

        public String burner;

        public BigInteger value;
    }

    public static class BlacklisterChangedEventResponse {
        public Log log;

        public String newBlacklister;
    }

    public static class BlacklistStoreSetEventResponse {
        public Log log;

        public String blacklistStore;
    }

    public static class BlacklistEventResponse {
        public Log log;

        public String account;

        public BigInteger _status;
    }

    public static class PauseEventResponse {
        public Log log;
    }

    public static class UnpauseEventResponse {
        public Log log;
    }

    public static class PauserChangedEventResponse {
        public Log log;

        public String newAddress;
    }

    public static class TokenStoreSetEventResponse {
        public Log log;

        public String tokenStore;
    }

    public static class ChangeTokenNameEventResponse {
        public Log log;

        public String newName;

        public String newSymbol;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String holder;

        public String spender;

        public BigInteger value;
    }
}
